<!DOCTYPE html>
<html>
<head>
  <title>3D Graph Visualization</title>
  <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
</head>
<body>
  <div id="graph"></div>

  <script>
    const coordinates = [
      [0, 0, 0],
      [1, 1, 1],
      [2, 2, 2],
      [3, 3, 3]
    ];

    const adjacencyList = {
      0: [1, 2],
      1: [0, 2, 3],
      2: [0, 1],
      3: [1]
    };

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('graph').appendChild(renderer.domElement);

    for (let node in adjacencyList) {
      const sphereGeometry = new THREE.SphereGeometry(0.1, 32, 32);
      const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
      const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
      sphere.position.set(coordinates[node][0], coordinates[node][1], coordinates[node][2]);
      scene.add(sphere);

      adjacencyList[node].forEach(neighbor => {
        const lineMaterial = new THREE.LineBasicMaterial({ color: 0x0000ff });
        const lineGeometry = new THREE.Geometry();
        lineGeometry.vertices.push(new THREE.Vector3(coordinates[node][0], coordinates[node][1], coordinates[node][2]));
        lineGeometry.vertices.push(new THREE.Vector3(coordinates[neighbor][0], coordinates[neighbor][1], coordinates[neighbor][2]));
        const line = new THREE.Line(lineGeometry, lineMaterial);
        scene.add(line);
      });
    }

    camera.position.z = 5;

    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }

    animate();
  </script>
</body>
</html>